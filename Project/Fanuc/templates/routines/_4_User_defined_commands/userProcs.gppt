
{{

}}


@usr_MessageFormat(string sMessage)
	; CE 06.22.2022: tool_message 100% working
	; This function will take a message and convert it to either:
	; a.)Limited Char count per line and max amount of line (set globally) ex: 32 char by 5 lines
	; b.)If message is output on multi lines ex: 'Tool Description' in toolkit
	;	and the user types x amount of chars, hits enter, and continues to type
	local integer iL_To iL_From iL_CharCount iL_Count1 iL_MCount
	local string sL_ReplacedToolMsg sLA_ToolDescription<<50>> sL_Temp

	; i_ToolDescriptionMaxLines = 5 | Max allowed lines set global
	; i_ToolDescriptionLen = 32 | Max allowed characters per line set global

	sL_ReplacedToolMsg = sMessage
	call @usr_ReplacedString(sL_ReplacedToolMsg) ; Account for any funky chars like degree (Alt + 0176)

	if strlen(sL_ReplacedToolMsg) <> 0
		if l_DefaultMessageFormat == true
			if !instr(sL_ReplacedToolMsg, '\n'); Message typed out on one line
				iL_To = i_ToolDescriptionLen
				iL_Count1 = 1
				iL_MCount = 1
				iL_CharCount = strlen(sL_ReplacedToolMsg)

				while iL_Count1 < i_ToolDescriptionMaxLines
					if iL_CharCount == strlen(sL_ReplacedToolMsg) 
						sLA_ToolDescription<<iL_MCount>> = substr(trim(sL_ReplacedToolMsg), 1, iL_To)
						{nb, s_OpenComment+sLA_ToolDescription<<iL_MCount>>+s_CloseComment}
						iL_CharCount = iL_CharCount - strlen(sLA_ToolDescription<<iL_MCount>>)
						iL_From = i_ToolDescriptionLen
					elseif iL_CharCount >= i_ToolDescriptionLen
						sL_Temp = sLA_ToolDescription<<iL_MCount - 1>>
						sLA_ToolDescription<<iL_MCount>> = substr(trim(sL_ReplacedToolMsg), iL_From, iL_To)
						
						if left(sLA_ToolDescription<<iL_MCount>>, 1) == ' '
							sLA_ToolDescription<<iL_MCount>> = replace(sLA_ToolDescription<<iL_MCount>>, left(sLA_ToolDescription<<iL_MCount>>, 1), '', 1)
						endif 
						if right(sL_Temp, 1) == left(sLA_ToolDescription<<iL_MCount>>, 1)
							sLA_ToolDescription<<iL_MCount>> = replace(sLA_ToolDescription<<iL_MCount>>, left(sLA_ToolDescription<<iL_MCount>>, 1), '', 1)
							{nb, s_OpenComment+sLA_ToolDescription<<iL_MCount>>+s_CloseComment}
						else
							{nb, s_OpenComment+sLA_ToolDescription<<iL_MCount>>+s_CloseComment}
						endif
						
						iL_CharCount = iL_CharCount - strlen(sLA_ToolDescription<<iL_MCount>>)
						iL_From = iL_From + i_ToolDescriptionLen
					elseif iL_CharCount == 0
						break
					else
						iL_From = strlen(sL_ReplacedToolMsg) - iL_CharCount
						sL_Temp = sLA_ToolDescription<<iL_MCount - 1>>
						sLA_ToolDescription<<iL_MCount>> = substr(sL_ReplacedToolMsg, iL_From, iL_To)

						if left(sLA_ToolDescription<<iL_MCount>>, 1) == ' '
							sLA_ToolDescription<<iL_MCount>> = replace(sLA_ToolDescription<<iL_MCount>>, left(sLA_ToolDescription<<iL_MCount>>, 1), '', 1)
						endif
						if right(sL_Temp, 1) == left(sLA_ToolDescription<<iL_MCount>>, 1)
							sLA_ToolDescription<<iL_MCount>> = replace(sLA_ToolDescription<<iL_MCount>>, left(sLA_ToolDescription<<iL_MCount>>, 1), '', 1)
							{nb, s_OpenComment+sLA_ToolDescription<<iL_MCount>>+s_CloseComment}
						else
							{nb, s_OpenComment+sLA_ToolDescription<<iL_MCount>>+s_CloseComment}
						endif
						
						break
					endif
					iL_MCount = iL_MCount + 1
					iL_Count1 = iL_Count1 + 1
				endw
				{nb}
			else ; Message typed out on multiple lines
				local integer iL_NewLinePos iL_MessageCount
				
				sL_ReplacedToolMsg = replace(sL_ReplacedToolMsg,'\r','')
				if strlen(sL_ReplacedToolMsg) <> 0
					iL_Count1 = 0
					iL_MCount = 1
					iL_MessageCount = iL_MCount
					while iL_Count1 <= strlen(sL_ReplacedToolMsg)
						iL_Count1 = iL_Count1 + 1
						iL_NewLinePos = instr(sL_ReplacedToolMsg,'\n',iL_Count1)
						if iL_NewLinePos <> 0
							sLA_ToolDescription<<iL_MCount>> = substr(sL_ReplacedToolMsg,iL_Count1,(iL_NewLinePos-iL_Count1))
							iL_MCount = iL_MCount + 1
							iL_MessageCount = iL_MCount
							iL_Count1 = iL_NewLinePos
						else
							sLA_ToolDescription<<iL_MCount>> = substr(sL_ReplacedToolMsg,iL_Count1,(strlen(sL_ReplacedToolMsg)-iL_Count1+1))
							iL_Count1 = (strlen(sL_ReplacedToolMsg)+1)
						endif
					endw
					iL_MCount = 1
					while iL_MCount <= iL_MessageCount
						if left(sLA_ToolDescription<<iL_MCount>>, 1) == ' '
							sLA_ToolDescription<<iL_MCount>> = replace(sLA_ToolDescription<<iL_MCount>>, left(sLA_ToolDescription<<iL_MCount>>, 1), '', 1)
						endif
						{nb,s_OpenComment,trim(sLA_ToolDescription<<iL_MCount>>),s_CloseComment}
						iL_MCount = iL_MCount + 1
					endw
					{nb}
				endif
			endif
		else; If customer would like some other way
			call @cus_MessageFormat(sL_ReplacedToolMsg)
		endif
	endif
endp

@cus_MessageFormat(string sMessage)
 ; Customer specific message styling/format. @usr_MessageFormat should not be altered.
 ; sL_ReplacedToolMsg gets passed in from @usr_MessageFormat and has already ran through special char cleaner
	{nb, '(************************************)'}
	{nb, upper('(!!!cus_MessageFormat not complete!!!)')}
	{nb, '(************************************)'}
	{nb}
	{nb}
	{nb, s_OpenComment + sMessage + s_CloseComment}
endp

@usr_ReplacedString(string sL_String)
	; Windows-1252
	sL_String = replace(sL_String,'\xc4','Ae',0)         ;�
	sL_String = replace(sL_String,'\xe4','ae',0)         ;�
	sL_String = replace(sL_String,'\xd6','Oe',0)         ;�
	sL_String = replace(sL_String,'\xf6','oe',0)         ;�
	sL_String = replace(sL_String,'\xdc','Ue',0)         ;�
	sL_String = replace(sL_String,'\xfc','ue',0)         ;�
	sL_String = replace(sL_String,'\xdf','ss',0)         ;�
	sL_String = replace(sL_String,'\xc9','E',0)          ;�
	sL_String = replace(sL_String,'\xe9','e',0)          ;�
	sL_String = replace(sL_String,'\xc8','E',0)          ;�
	sL_String = replace(sL_String,'\xe8','e',0)          ;�
	sL_String = replace(sL_String,'\xc1','A',0)          ;�
	sL_String = replace(sL_String,'\xe1','a',0)          ;�
	sL_String = replace(sL_String,'\xc0','A',0)          ;�
	sL_String = replace(sL_String,'\xe0','a',0)          ;�
	sL_String = replace(sL_String,'\xc2','A',0)          ;�
	sL_String = replace(sL_String,'\xe2','a',0)          ;�
	sL_String = replace(sL_String,'\xca','E',0)          ;�
	sL_String = replace(sL_String,'\xea','e',0)          ;�
	sL_String = replace(sL_String,'\x80','-Euro',0)      ;�
	sL_String = replace(sL_String,'\xf8','D',0)          ;�
	sL_String = replace(sL_String,'\x7b','-',0)          ;{
	sL_String = replace(sL_String,'\x7d','-',0)          ;}
	sL_String = replace(sL_String,'\x24','-Dollar',0)    ;$
	sL_String = replace(sL_String,'\x25','-Percent',0)   ;%
	sL_String = replace(sL_String,'\xb0','-Grad',0)      ;�
	sL_String = replace(sL_String,'\x7e','-',0)          ;~
	sL_String = replace(sL_String,'\x2f','-',0)          ;/
	sL_String = replace(sL_String,'\x5c','-',0)          ;\
	sL_String = replace(sL_String,'\x7c','I',0)          ;|
	sL_String = replace(sL_String,'\xb4','-',0)          ;�
	sL_String = replace(sL_String,'\x22','-',0)          ;"
	sL_String = replace(sL_String,'\x22','-',0)          ;"
	sL_String = replace(sL_String,'\xb2','2',0)          ;�
	sL_String = replace(sL_String,'\xb3','3',0)          ;�
	sL_String = replace(sL_String,'\x5f','-',0)          ;_
	sL_String = replace(sL_String,'\x2c','.',0)          ;,
	sL_String = replace(sL_String,'\x5b','(',0)          ;[
	sL_String = replace(sL_String,'\x5d',')',0)          ;]
	sL_String = upper(sL_String)
endp

@usr_ToolCall(logical b_HalfIndex)
	local integer  iL_MessageLen ; Tool output section below
	

	if b_HalfIndex
		local numeric nL_HalfIndexDegree, nL_NegDeg, nL_PosDeg
		local integer lI_StationIndexDirection, iL_IndexADelta, iL_IndexBDelta
		local integer iL_NegDegOffset, iL_PosDegOffset, iL_ToolNumber1

		nL_HalfIndexDegree				= 15.0 ;Always positive		
		lI_StationIndexDirection		= 3    ;3 = CW | 4 = CCW
		iL_IndexADelta 					= 11   ;Always positive		
		iL_IndexBDelta 					= 12   ;Always positive

	
		if lI_StationIndexDirection == 4 ; CCW
			;Original logic
			nL_NegDeg = (nL_HalfIndexDegree * -1) ; Negitive value
			nL_PosDeg = nL_HalfIndexDegree ; Pos value
			iL_NegDegOffset = (tool_number + iL_IndexADelta); 11
			iL_PosDegOffset = (tool_number + iL_IndexBDelta); 12
		elseif lI_StationIndexDirection == 3 ; CW
			;Modified logic for CW turret rotation
			nL_NegDeg = nL_HalfIndexDegree ; Flip To Pos
			nL_PosDeg = (nL_HalfIndexDegree * -1) ; Flip to Neg
			iL_NegDegOffset = (tool_number + iL_IndexBDelta); 12
			iL_PosDegOffset = (tool_number + iL_IndexADelta); 11
		endif
	endif
	
 ;-------------------------ERROR LOGIC---------------------------------

		; Turning
	if job_machine_type	== turning
		if b_HalfIndex
			if tool_number <> tool_position_in_turret or tool_number <> tool_offset_number
				if tool_number <> tool_offset_number
					; Handle orientation
					if abs(measure_orientation) <> abs(nL_HalfIndexDegree); User Error
						{nl, '(Cutting Point Data set incorrect)'}
						print 'Turning: Measure Orientation Not In Range'
						print '!!!GCODE ABORTED!!!'
						abort
					endif
				endif
			elseif tool_number == tool_position_in_turret or tool_number == tool_offset_number
				if tool_number == tool_offset_number	
				; Handle no orientation
					if measure_orientation <> 0 
						print 'Turning: Measure Orientation Not Zero'
						print '!!!GCODE ABORTED!!!'
						abort
					endif
				endif
			endif
		endif
	endif
		; Milling 
	if job_machine_type == milling
		if b_HalfIndex
			if tool_number <> tool_position_in_turret or tool_number <> h_offset
				if tool_number <> h_offset
					; Handle orientation
					if abs(measure_orientation) <> abs(nL_HalfIndexDegree); User Error
						print 'Milling: Measure Orientation Not In Range'
						print '!!!GCODE ABORTED!!!'
						abort
					endif
				endif
			elseif tool_number == tool_position_in_turret or tool_number == h_offset
				if tool_number == h_offset
					; Handle no orientation
					if measure_orientation <> 0
						print 'Milling: Measure Orientation Not Zero'
						print '!!!GCODE ABORTED!!!'
						abort
					endif
				endif
			endif
		endif
	endif

 ; -------------------------TOOL OUTPUT---------------------------------

	iL_MessageLen = strlen(tool_message)

	if job_machine_type == turning
		if b_HalfIndex
			; Tool and Offset call for half index
			if tool_number <> 1
				if measure_orientation == nL_NegDeg
					{nb, iL_NegDegOffset: '<T>2/2.0(p)<>', iL_NegDegOffset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				elseif measure_orientation == nL_PosDeg
					{nb, iL_PosDegOffset: '<T>2/2.0(p)<>', iL_PosDegOffset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				else
					{nb, tool_number: '<T>2/2.0(p)<>', tool_offset_number: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				endif
			elseif tool_number == 1 ;Handle T1
				if measure_orientation == nL_NegDeg
					iL_ToolNumber1 = (tool_number + 23)
					{nb, iL_ToolNumber1: '<T>2/2.0(p)<>', iL_ToolNumber1: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				elseif measure_orientation == nL_PosDeg
					iL_ToolNumber1 = (tool_number + 12)
					{nb, iL_ToolNumber1: '<T>2/2.0(p)<>', iL_ToolNumber1: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				else
					{nb, tool_number: '<T>2/2.0(p)<>', tool_offset_number: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				endif
			endif
		else
			{nl, '!!!TURN TOOL CALL FOR NON HALF INDEX!!!'}
		endif
	endif

	if job_machine_type == milling
		if b_HalfIndex
			; Tool and Offset call for half index milling
			if tool_number <> 1
				if measure_orientation == nL_NegDeg
					{nb, iL_NegDegOffset: '<T>2/2.0(p)<>', iL_NegDegOffset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				elseif measure_orientation == nL_PosDeg
					{nb, iL_PosDegOffset: '<T>2/2.0(p)<>', iL_PosDegOffset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				else
					{nb, tool_number: '<T>2/2.0(p)<>', h_offset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				endif
			elseif tool_number == 1 ;Handle T1
				if measure_orientation == nL_NegDeg
					iL_ToolNumber1 = (tool_number + 23)
					{nb, iL_ToolNumber1: '<T>2/2.0(p)<>', iL_ToolNumber1: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				elseif measure_orientation == nL_PosDeg
					iL_ToolNumber1 = (tool_number + 12)
					{nb, iL_ToolNumber1: '<T>2/2.0(p)<>', iL_ToolNumber1: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				else
					{nb, tool_number: '<T>2/2.0(p)<>', h_offset: '<>2/2.0(p)<>'}
					if b_OutputToolMessage 
						if iL_MessageLen <> 0
							{'(',tool_message,')'}
						else
							if b_DefaultOpMessage
								call @usr_ToolTypeName
							endif
						endif
					endif
				endif
			endif
		else
			{nl, '!!!MILL TOOL CALL FOR NON HALF INDEX'}
		endif
	endif
endp

@usr_ToolTypeName
	;Software limits - there is no "tool_user_type" at turning operations and it is on english
	local string lS_UserToolType lS_ToolType lS_ToolTypeMill<<100>> lS_ToolTypeTurn<<100>>
	local integer lI_ToolTypeTemp
	
	lS_ToolTypeMill<<1>> = 'BULL NOSE'
	lS_ToolTypeMill<<2>> = 'END MILL'
	lS_ToolTypeMill<<7>> = 'SLOT MILL'
	lS_ToolTypeMill<<8>> = 'LOLLIPOP MILL'
	lS_ToolTypeMill<<9>> = 'TAPER MILL D'
	lS_ToolTypeMill<<10>> = 'CHAMFER DRILL'
	lS_ToolTypeMill<<11>> = 'DOVE MILL'
	lS_ToolTypeMill<<12>> = 'TAP MILL'
	lS_ToolTypeMill<<13>> = 'THREAD'
	
	lS_ToolTypeMill<<15>> = 'BALL NOSE'
	lS_ToolTypeMill<<16>> = 'REAMER'
	lS_ToolTypeMill<<17>> = 'BORE'
	lS_ToolTypeMill<<18>> = 'CENTER DRILL'
	lS_ToolTypeMill<<19>> = 'ENGRAVING MILL'
	lS_ToolTypeMill<<20>> = 'FACE MILL'
	lS_ToolTypeMill<<21>> = 'SPOT DRILL'
	lS_ToolTypeMill<<22>> = 'TOOL PROBE'
	lS_ToolTypeMill<<23>> = 'BROACHING'
	lS_ToolTypeMill<<24>> = 'SAW'
	lS_ToolTypeMill<<25>> = 'TAPER BALL NOSE'
	lS_ToolTypeMill<<26>> = 'BARELL MILL'
	lS_ToolTypeMill<<27>> = 'BARELL MILL'
	lS_ToolTypeMill<<30>> = 'DRILL'
	
	lS_ToolTypeTurn<<1>> = 'OD TURNING'
	lS_ToolTypeTurn<<2>> = 'OD GROOVE'
	lS_ToolTypeTurn<<3>> = 'OD CONTOUR'
	lS_ToolTypeTurn<<4>> = 'OD THREAD'
	lS_ToolTypeTurn<<5>> = 'ID TURNING'
	lS_ToolTypeTurn<<6>> = 'ID GROOVE'
	lS_ToolTypeTurn<<7>> = 'OD THREAD'
	lS_ToolTypeTurn<<8>> = 'ID FACE BACK'
	lS_ToolTypeTurn<<9>> = 'ID CONTOUR'
	lS_ToolTypeTurn<<30>> = 'DRILL'

	if tool_type eq 0 ;drill
		lI_ToolTypeTemp = 30
	else
		lI_ToolTypeTemp = tool_type
	endif
	
	if job_machine_type eq turning
		lS_ToolType = 'turning'
		if lS_ToolType eq 'turning' or (next_tool_machine_type eq turning)
			if (lI_ToolTypeTemp eq TURN_GENERAL_EXT or lI_ToolTypeTemp eq Ext_ROUGH)
				lS_UserToolType = lS_ToolTypeTurn<<1>>
			elseif lI_ToolTypeTemp eq TURN_GROOVING_EXT or lI_ToolTypeTemp eq Ext_GROOVE
				lS_UserToolType = lS_ToolTypeTurn<<2>>
			elseif lI_ToolTypeTemp eq Ext_CONTOUR
				lS_UserToolType = lS_ToolTypeTurn<<3>>
			elseif lI_ToolTypeTemp eq TURN_THREADING_EXT or lI_ToolTypeTemp eq Ext_THREAD
				lS_UserToolType = lS_ToolTypeTurn<<4>>
			elseif lI_ToolTypeTemp eq 13 or lI_ToolTypeTemp eq 9
				lS_UserToolType = lS_ToolTypeTurn<<5>>
			elseif lI_ToolTypeTemp eq 14 or lI_ToolTypeTemp eq 7
				lS_UserToolType = lS_ToolTypeTurn<<6>>
			elseif lI_ToolTypeTemp eq 15 or lI_ToolTypeTemp eq 6
				lS_UserToolType = lS_ToolTypeTurn<<7>>
			elseif lI_ToolTypeTemp eq Int_FACE_BACK
				lS_UserToolType = lS_ToolTypeTurn<<8>>
			elseif lI_ToolTypeTemp eq Int_CONTOUR
				lS_UserToolType = lS_ToolTypeTurn<<9>>
			elseif lI_ToolTypeTemp == 30
				lS_UserToolType = lS_ToolTypeTurn<<30>>
			elseif lI_ToolTypeTemp eq drill
				lS_UserToolType = lS_ToolTypeMill<<30>>
			elseif lI_ToolTypeTemp eq end_mill
				lS_UserToolType = lS_ToolTypeMill<<2>>
			elseif lI_ToolTypeTemp eq tap_mill
				lS_UserToolType = lS_ToolTypeMill<<12>>
			elseif lI_ToolTypeTemp eq ball_nose
				lS_UserToolType = lS_ToolTypeMill<<15>>
			elseif lI_ToolTypeTemp eq reamer_mill
				lS_UserToolType = lS_ToolTypeMill<<16>>
			elseif lI_ToolTypeTemp eq center_drill
				lS_UserToolType = lS_ToolTypeMill<<18>>
			else
				lS_UserToolType = 'NOT DEFINED'
			endif
		endif
	else
		lS_ToolType = 'milling'
		lS_UserToolType = lS_ToolTypeMill<<lI_ToolTypeTemp>>
	endif

	lS_UserToolType=lS_UserToolType;+' D'+tostr(tool_diameter:'5.2(p)')
	
	{'('upper(lS_UserToolType)')'}
endp

@usr_defTool
	local logical bL_ToolList
	local string sL_ToolList
	local logical bL_ToolDescription
	local logical bL_OutputToolMessage, bL_DefaultOpMessage

	bL_OutputToolMessage	= b_OutputToolMessage	;Set to control locally
	bL_DefaultOpMessage		= b_DefaultOpMessage	;Set to control locally

	;--------Tool Related Message Output----------------------------------------
	
	;		----@def(_turn_)tool----
	bL_ToolList				= true ;True = Output Toollist @def_(turn_)tool sections
	bL_ToolDescription		= true ;True = Output Tool Description in Tool List
	
	;		----@(turning_)change_tool----
	bL_OutputToolMessage	= true ;True = Outputs Tool Message 
	bL_DefaultOpMessage		= false;True = Generates a default operation message ex: TURN OD
	
	if current_command == '@def_turn_tool' or current_command == '@def_tool'
		local string lS_TMtoolnumber lS_TMoffset 
		if current_command == '@def_turn_tool'
			; Turn Tool Message Format
			if bL_ToolList 
				lS_TMtoolnumber = tostr(tool_position_in_turret:'<(TOOL: >8.0(p)< >')
				lS_TMoffset = tostr(tool_offset_number:'<OFFSET: >z2.0(p)<)>')
				sL_ToolList = lS_TMtoolnumber + lS_TMoffset
				{nb, sL_ToolList}
			endif
			if bL_ToolDescription
				call @usr_MessageFormat(tool_message)
			endif
		else
			; Mill Tool Message Format
			if bL_ToolList 
				lS_TMtoolnumber = tostr(tool_position_in_turret:'<(TOOL: >8.0(p)< >')
				lS_TMoffset = tostr(h_offset:'<OFFSET: >z2.0(p)<)>')
				sL_ToolList = lS_TMtoolnumber + lS_TMoffset; Message output variable
				{nb, sL_ToolList}
			endif
			if bL_ToolDescription
				call @usr_MessageFormat(tool_message)
			endif
		endif
	endif
	;---------------------------------------------------------------------------
endp
