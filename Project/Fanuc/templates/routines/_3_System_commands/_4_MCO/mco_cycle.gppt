;#region |09-MCO
;-------------------

@mco_cycle

   if MCO_CycleName eq 'mco_ToolBreak'
      b_CallFromMCO = true
      call @tool_breakage
   endif

   if MCO_CycleName eq 'mco_RetreatToToolStart'
      if bVMID_MCO_RetractToToolStartLevel
         b_RetreatToToolZLevel = true
      else
         b_RetreatToToolZLevel = false
      endif
   endif 

endp

;-------------------

@start_mach_ctrl

   call @usr_ReplaceString(machine_control_name)
   {nb,'(' upper(machine_control_name)')'}

endp

;-------------------

@end_mach_ctrl

   if b_G53
      call @home_number
      b_G53 = false
   endif

   b_MCOJob = false
   b_InsideJob = false

endp

;-------------------

@move_object

   local numeric nL_PosX nL_PosY nL_PosZ nL_PosFirstRotary nL_PosSecondRotary

   if MCO_CoordSysType eq 1 ;machine coordinate system
      gcode=53
      {nb,gcode}
      nL_PosX=move_axis_x
      nL_PosY=move_axis_y
      nL_PosZ=move_axis_z
      nL_PosFirstRotary=move_axis_a
      nL_PosSecondRotary=move_axis_b
      b_G53=false  ;G53 is not modal
   else                    ;part coordinate system
      {nb}
      nL_PosX=xh_move
      nL_PosY=yh_move
      nL_PosZ=zh_move
      nL_PosFirstRotary=ah_move
      nL_PosSecondRotary=bh_move
   endif

   change(nL_PosX)=userDef_x
   change(nL_PosY)=userDef_y
   change(nL_PosZ)=userDef_z
   change(feed_move)=userDef_f

   if is_rapid_move
      gcode=0
   else
      gcode=1
   endif

   {gcode,[nL_PosX:xlpos_f],[nL_PosY:ylpos_f],[nL_PosZ:zlpos_f]}

   if !is_rapid_move
      {[feed_move:feed_f]}
   endif

   if change(nL_PosFirstRotary) or change(nL_PosSecondRotary)
      i_PartHomeSave  =0
   endif

   b_InsideJob=true
   b_TurretINRefPos=false
;   b_MCOJob=true ;this should be correct already from software

endp

;------------------

@cool_flood

   call @usr_MCONewLine
   local integer iCoolant1 iCoolant2 iCoolant3
   if ActionName eq 'Maschine'
      if i_MachFloodCoolantOn eq 0
         if i_MachFloodIvalCoolantOn eq 0
            iCoolant1=i_MachHpFloodCoolantOn
            iCoolant2=i_MachLpFloodCoolantOn
            iCoolant3=i_MachHpFloodCoolantOff
         else
            if flood_coolant_val ne 0
               iCoolant3=i_MachFloodIvalCoolantOn
               iCoolant2=i_MachFloodIvalCoolantOff
            else
               iCoolant2=i_MachFloodIvalCoolantOff
            endif
         endif
      else
         iCoolant1=i_MachFloodCoolantOn
         iCoolant2=i_MachFloodCoolantOff
      endif
   else
      if i_FloodCoolantOn eq 0
         if i_FloodIvalCoolantOn eq 0
            iCoolant1=i_HpFloodCoolantOn
            iCoolant2=i_LpFloodCoolantOn
            iCoolant3=i_HpFloodCoolantOff ; i_LpFloodCoolantOff
         else
            if flood_coolant_val ne 0
               iCoolant3=i_FloodIvalCoolantOn ;flood_coolant_val
               iCoolant2=i_FloodIvalCoolantOff
            else
               iCoolant2=i_FloodIvalCoolantOff
            endif
         endif
      else
         iCoolant1=i_FloodCoolantOn
         iCoolant2=i_FloodCoolantOff
      endif
   endif
   if flood_coolant eq 1
      {iCoolant1:mcode_f}
   elseif flood_coolant eq 2
      {iCoolant2:mcode_f}
   else
      {iCoolant3:mcode_f}
      if flood_coolant_val ne 0
         {flood_coolant_val}
      endif
   endif
   flood_coolant_val=0 ;init

endp

;-------------------

@act_air

   call @usr_MCONewLine
   if ActionName eq 'Maschine'
      if air_blast_coolant eq 1
         {i_MachActiveAirCoolantOn:mcode_f}
      else
         {i_MachActiveAirCoolantOff:mcode_f}
      endif
   else
      if air_blast_coolant eq 1
         {i_AirBlastCoolantOn:mcode_f}
      else
         {i_AirBlastCoolantOff:mcode_f}
      endif
   endif

endp

;-------------------

@cool_through_tool

   call @usr_MCONewLine
   local integer iCoolant1 iCoolant2 iCoolant3
   if i_ThroughCoolantOn eq 0
      if i_ThroughIvalCoolantOn eq 0
         iCoolant1=i_HpThroughCoolantOn
         iCoolant2=i_LpThroughCoolantOn
         iCoolant3=i_HpThroughCoolantOff ; i_LpThroughCoolantOff
      else
         if Through_coolant_val ne 0
            iCoolant3=i_ThroughIvalCoolantOn
            iCoolant2=i_ThroughIvalCoolantOff
         else
            iCoolant2=i_ThroughIvalCoolantOff
         endif
      endif
   else
      iCoolant1=i_ThroughCoolantOn
      iCoolant2=i_ThroughCoolantOff
   endif

   if Through_coolant eq 1
      {iCoolant1:mcode_f}
   elseif Through_coolant eq 2
      {iCoolant2:mcode_f}
   else
      {iCoolant3:mcode_f}
      if Through_coolant_val ne 0
         {Through_coolant_val}
      endif
   endif
   Through_coolant_val=0 ;init

endp

;-------------------

@cool_mist

   call @usr_MCONewLine
   local integer iCoolant1 iCoolant2 iCoolant3
   if ActionName eq 'Maschine'
      if i_MachMistCoolantOn eq 0
         if i_MachMistIvalCoolantOn eq 0
            iCoolant1=i_MachHpMistCoolantOn
            iCoolant2=i_MachLpMistCoolantOn
            iCoolant3=i_MachHpMistCoolantOff ; i_MachLpMistCoolantOff
         else
            if mist_coolant_val ne 0
               iCoolant3=i_MachMistIvalCoolantOn
               iCoolant2=i_MachMistIvalCoolantOff
            else
               iCoolant2=i_MachMistIvalCoolantOff
            endif
         endif
      else
         iCoolant1=i_MachMistCoolantOn
         iCoolant2=i_MachMistCoolantOff
      endif
   else
      if i_MistCoolantOn eq 0
         if i_MistIvalCoolantOn eq 0
            iCoolant1=i_HpMistCoolantOn
            iCoolant2=i_LpMistCoolantOn
            iCoolant3=i_HpMistCoolantOff ; i_LpMistCoolantOff
         else
            if mist_coolant_val ne 0
               iCoolant3=i_MistIvalCoolantOn
               iCoolant2=i_MistIvalCoolantOff
            else
               iCoolant2=i_MistIvalCoolantOff
            endif
         endif
      else
         iCoolant1=i_MistCoolantOn
         iCoolant2=i_MistCoolantOff
      endif
   endif

   if mist_coolant eq 1
      {iCoolant1:mcode_f}
   elseif mist_coolant eq 2
      {iCoolant2:mcode_f}
   else
      {iCoolant3:mcode_f}
      if mist_coolant_val ne 0
         {mist_coolant_val}
      endif
   endif
   mist_coolant_val=0 ;init

endp

;-------------------

@active_air_through_spindle

   call @usr_MCONewLine
   if air_blast_coolant eq 1 or air_blast_coolant eq 2
      call @usr_coolingOn
   else
      call @usr_CoolingOff
   endif

endp

;-------------------

@machine_power

   call @usr_MCONewLine
   if MachinePower eq 1
      {i_MachinePowerOn:mcode_f}
   else
      {i_MachinePowerOff:mcode_f}
   endif

endp

;-------------------

@machine_light

   call @usr_MCONewLine
   if MachineLight eq 1
      {i_MachineLightOn:mcode_f}
   else
      {i_MachineLightOff:mcode_f}
   endif

endp

;-------------------

@oil_skimmer

   call @usr_MCONewLine
   if OilSkimmer eq 1
      {i_OilSkimmerOn:mcode_f}
   else
      {i_OilSkimmerOff:mcode_f}
   endif

endp

;-------------------

@min_quan_loubr

   call @usr_MCONewLine
   minimum_quantity_L=min_quan_lubr
   if min_quan_lubr eq 2
      call @usr_coolingOn
   else
      call @usr_CoolingOff
   endif

endp

;-------------------

@door

   call @usr_MCONewLine
   if open_door eq 1
      {i_OpenDoorOn:mcode_f s_FirstComment'TUER AUF's_LastComment}
   else
      {i_OpenDoorOff:mcode_f s_FirstComment'TUER ZU's_LastComment}
   endif

endp

;-------------------

@record_machining

   call @usr_MCONewLine
   if RecordMachining eq 1
      {i_RecordMachiningOn:mcode_f}
   endif
   if RecordMachining eq 2
      {i_RecordMachiningOff:mcode_f}
   endif

endp

;-------------------

@chip_convery

   call @usr_MCONewLine
   if chip_convey eq 1  ;CW
      {i_ChipConveyCW:mcode_f}
   elseif chip_convey eq 2   ;CCW
      {i_ChipConveyCCW:mcode_f}
   else ;Off
      {i_ChipConveyOff:mcode_f}
   endif

endp

;-------------------

@bed_rinsing

   call @usr_MCONewLine
   mach_bed_rinsing_coolant=Bed_Rinsing
   if Bed_Rinsing eq 1
      call @usr_coolingOn
   else
     call @usr_CoolingOff
   endif

endp

;-------------------

@mist_collector

   call @usr_MCONewLine
   if MistCollector eq 1 ;MistCollector:on
      {i_MistCollectorOn:mcode_f}
   else                  ;off
      {i_MistCoolantOff:mcode_f}
   endif

endp

;-------------------

@change_pallet

   ;Must be defined in VMID ==> Table / Options / Pallet change and number of the pallett
   call @usr_MCONewLine
   ; {nb,(36):mcode_f} ;The new machines can have this option - the pallet will be changed only agtef confirmation on the machine
   ; {nb,(98):mcode_f} ;M50 or M98 =Palettenwechsel
   ;The new machines can have this option - older witout P-Parameter
   ; {'P'PalletNum} ;P1=Palette 1 wechseln, P2=Palette 2 wechseln
   {(910+PalletNum):mcode_f} ;P1=Palette 1 wechseln, P2=Palette 2 wechseln

endp

;-------------------

@misc_act

   if message ne ''
      call @usr_ReplaceString(message)
      {nb,'('upper(message)')'}
   endif
   if bVMID_MI_PRGStop
      call @usr_program_stop
      call @home_number
   endif

endp

;-------------------

@delay

   {nb(4):gcode_f,delay_period:s_DwellTime,sA_Comment<<32>>} ;wait time in seconds (0.1-900s)

endp

;-------------------

@dwell

   if job_type ne 'deep drill'
      call @usr_MCONewLine
   endif
   {nb,(4):gcode_f,dwell_time:s_DwellTime,sA_Comment<<32>>} ;wait time in seconds (0.1-900s)

endp

;-------------------

@machine_opt_stop

   if optional_stop eq 1
      call @usr_MCONewLine
      {(1):mcode_f}
   endif

endp

;-------------------

@machine_stop

   if machine_stop eq 1
      call @usr_MCONewLine
      {(0):mcode_f}
   endif

endp

;-------------------

@mco_message

   call @usr_MCONewLine
   call @usr_ReplaceString(message)
   {'('upper(message)')'}

endp

;-------------------

@spin

   call @usr_MCONewLine
   if spin_direction ne 3
      mcode=2+spin_direction
      n_SpinSave=spin_rate
      {spin_rate:spin_f}
      b_SpinOn = true
   else                      ;off
      mcode=5
      n_SpinSave=0
      b_SpinOn = false
   endif
   {mcode}

endp

;-------------------

@unload_tool

   {nb(0):tool_number_f,(6):mcode_f}

endp

;-------------------

@fixture_change

   call @usr_ReplaceString(fixture_name)
   {nb,'('upper(fixture_name)')'}
   if fixture_message ne ''
      call @usr_ReplaceString(fixture_message)
      {nb,'('upper(fixture_message)')'}
   endif

endp

;-------------------

@usr_MCONewLine

   if MCO_New_Line eq 1
      {nb}
   else
      {' '}
   endif

endp